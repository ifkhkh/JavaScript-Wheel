/* https://github.com/rockboom/SheetJS-docs-zh-CN */
class Table2Sheet {
    constructor(option) {
        this.table = option.table
        this.raw = option.raw || true
        this.xlsxName = option.xlsxName
    }

    download() {
        let sheet = XLSX.utils.table_to_sheet(this.table, { raw: this.raw })
        let wbout = this.sheetToWbout(sheet)
        let buf = this.strToArrayBuffer(wbout)
        let blob = this.bufferToBlob(buf)
        this.openDownloadDialog(blob, `${this.xlsxName}.xlsx`)
    }

    // sheet转换 wrokbook out
    sheetToWbout(sheet) {
        let workbook = XLSX.utils.book_new()
        XLSX.utils.book_append_sheet(workbook, sheet, "Sheet1")
        let wopts = {
            bookType: 'xlsx', // 要生成的文件类型
            bookSST: false, // 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性
            type: 'binary',
        }
        let wbout = XLSX.write(workbook, wopts)
        return wbout
    }

    // 字符串转ArrayBuffer
    strToArrayBuffer(s) {
        let buf = new ArrayBuffer(s.length)
        let view = new Uint8Array(buf)
        for (let i = 0; i != s.length; ++i) {
            view[i] = s.charCodeAt(i) & 0xFF
        }
        return buf
    }

    bufferToBlob(buf) {
        let blob = new Blob([buf], {type: "application/octet-stream"})
        return blob
    }

    // 通用的打开下载对话框方法，没有测试过具体兼容性
    // url 下载地址，也可以是一个blob对象，必选
    // saveName 保存文件名，可选
    openDownloadDialog(url, saveName) {
        if (typeof url === 'object' && url instanceof Blob) {
            url = URL.createObjectURL(url) // 创建blob地址
        }
        let aLink = document.createElement('a')
        aLink.href = url
        aLink.download = saveName || '' // HTML5新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效
        let event
        if (window.MouseEvent) {
            event = new MouseEvent('click')
        } else {
            event = document.createEvent('MouseEvents')
            event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null)
        }
        aLink.dispatchEvent(event)
    }
}
